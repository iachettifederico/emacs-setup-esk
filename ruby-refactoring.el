;;; Very simple refactoring code for Ruby-mode

(defvar rrf-refactored-const-body nil)
(defvar rrf-refactored-const-name nil)
(defvar rrf-refactored-method-body nil)
(defvar rrf-refactored-method-name nil)
(defvar rrf-insertion-method nil)

(defun rrf-extract-constant (const-name beg end)
  (interactive "sConstant Name: \nr")
  (setq rrf-refactored-const-name const-name)
  (setq rrf-refactored-const-body (buffer-substring beg end))
  (kill-region beg end)
  (insert-string rrf-refactored-const-name)
  (indent-according-to-mode)
  (setq rrf-insertion-method 'rrf-insert-extracted-constant))

(defun rrf-insert-extracted-constant ()
  (interactive)
  (insert-string rrf-refactored-const-name)
  (indent-according-to-mode)
  (insert-string " = ")
  (insert-string rrf-refactored-const-body)
  (indent-region (mark) (point)))

(defun rrf-extract-method (method-name args beg end)
  (interactive "sMethod Name: \nsArgs: \nr")
  (if (string= "" args)
      (setq rrf-refactored-method-name method-name)
    (setq rrf-refactored-method-name
          (concat method-name "(" args ")")))
  (setq beg (rrf-adj-beg beg end))
  (setq end (rrf-adj-endl beg end))
  (setq rrf-refactored-method-body (buffer-substring beg end))
  (goto-char beg)
  (kill-region beg end)
  (insert-string rrf-refactored-method-name)
  (indent-according-to-mode)
  (setq rrf-insertion-method 'rrf-insert-extracted-method))

(defun rrf-insert-extracted-method ()
  (interactive)
  (let ((b nil) (e nil))
    (insert-string "def ")
    (insert-string rrf-refactored-method-name)
    (indent-according-to-mode)
    (insert-string "\n")
    (setq b (point))
    (insert-string rrf-refactored-method-body)
    (setq e (point))
    (indent-region b e)
    (insert-string "\nend")
    (indent-according-to-mode)
    (insert-string "\n")))

(defun rrf-adj-beg (beg end)
  (if (< beg end) beg end))

(defun rrf-adj-end (beg end)
  (if (> beg end) beg end))

(defun rrf-adj-endl (beg end)
  (let ((newend (rrf-adj-end beg end)))
    (if (rrf-first-column-p newend)
        (- newend 1)
      newend)))

(defun rrfx (beg end)
  (interactive "r")
  (insert-string (rrf-adj-beg beg end))
  (insert-string ",")
  (insert-string (rrf-adj-endl beg end))
  (insert-string "\n"))

(defun rrf-first-column-p (loc)
  (save-excursion
    (goto-char (- loc 1))
    (looking-at "\n")))

(defun rrf-insert-extraction ()
  (interactive)
  (if rrf-insertion-method
      (funcall rrf-insertion-method)))

(require 'ruby-mode)
(define-key ruby-mode-map "\C-cac" 'rrf-extract-constant)
(define-key ruby-mode-map "\C-cam" 'rrf-extract-method)
(define-key ruby-mode-map "\C-cay" 'rrf-insert-extraction)
